# Docs for the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# More GitHub Actions for Azure: https://github.com/Azure/actions

name: Build and deploy Node.js app to Azure Web App

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js version
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'
          cache: 'npm'

      - name: npm install, build, and test
        run: |
          npm ci
          npm run build --if-present
          npm run test --if-present
        env:
          CI: true
          SESSION_SECRET: "placeholder-for-build"
          GITHUB_CLIENT_ID: "placeholder-for-build"
          GITHUB_CLIENT_SECRET: "placeholder-for-build"
          MONGODB_URI: "placeholder-for-build"

      - name: Prepare startup script and configuration files
        run: |
          # Startup script
          echo "#!/bin/bash" > startup.sh
          echo "cd /home/site/wwwroot" >> startup.sh
          echo "echo 'Starting application...'" >> startup.sh
          echo "node src/index.js" >> startup.sh
          chmod +x startup.sh
          
          # Update package.json
          node -e "const fs = require('fs'); const pkg = JSON.parse(fs.readFileSync('package.json')); pkg.scripts = pkg.scripts || {}; pkg.scripts.start = 'node src/index.js'; fs.writeFileSync('package.json', JSON.stringify(pkg, null, 2));"
          
          # Create .deployment file
          echo "[config]" > .deployment
          echo "command = bash startup.sh" >> .deployment

      - name: Create web.config
        run: |
          echo '<?xml version="1.0" encoding="utf-8"?>' > web.config
          echo '<configuration>' >> web.config
          echo '  <system.webServer>' >> web.config
          echo '    <handlers>' >> web.config
          echo '      <add name="iisnode" path="src/index.js" verb="*" modules="iisnode" />' >> web.config
          echo '    </handlers>' >> web.config
          echo '    <rewrite>' >> web.config
          echo '      <rules>' >> web.config
          echo '        <rule name="NodeInspector" patternSyntax="ECMAScript" stopProcessing="true">' >> web.config
          echo '          <match url="^src/index.js\/debug[\/]?" />' >> web.config
          echo '        </rule>' >> web.config
          echo '        <rule name="StaticContent">' >> web.config
          echo '          <action type="Rewrite" url="public{REQUEST_URI}" />' >> web.config
          echo '        </rule>' >> web.config
          echo '        <rule name="DynamicContent">' >> web.config
          echo '          <conditions>' >> web.config
          echo '            <add input="{REQUEST_FILENAME}" matchType="IsFile" negate="True" />' >> web.config
          echo '          </conditions>' >> web.config
          echo '          <action type="Rewrite" url="src/index.js" />' >> web.config
          echo '        </rule>' >> web.config
          echo '      </rules>' >> web.config
          echo '    </rewrite>' >> web.config
          echo '    <iisnode ' >> web.config
          echo '      nodeProcessCommandLine="node"' >> web.config
          echo '      watchedFiles="*.js;node_modules\*;routes\*.js;views\*.ejs"' >> web.config
          echo '      loggingEnabled="true"' >> web.config
          echo '      debuggingEnabled="false"' >> web.config
          echo '    />' >> web.config
          echo '    <httpErrors existingResponse="PassThrough" />' >> web.config
          echo '  </system.webServer>' >> web.config
          echo '</configuration>' >> web.config
          
          # Verificar o conteúdo do web.config
          cat web.config

      - name: Create deployment package
        run: |
          # Verificar que o package.json tem a configuração de porta
          echo "Verificando package.json:"
          cat package.json
          
          # Criar o pacote ZIP para implantação
          zip -r release.zip . \
            --exclude=".git/*" \
            --exclude=".github/*" \
            --exclude="node_modules/*" \
            --exclude="tests/*"

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v4
        with:
          name: node-app
          path: release.zip
          retention-days: 1

  deploy:
    runs-on: ubuntu-latest
    needs: build
    permissions:
      id-token: write
      contents: read
    environment:
      name: 'Production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: node-app
      
      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      
      - name: Configure App Service
        run: |
          echo "Configurando App Service para implantação..."
          
          # Configurar variáveis de ambiente
          az webapp config appsettings set \
            --name ghbill-dev-app \
            --resource-group ghbilling-rg \
            --settings \
              WEBSITES_PORT=8080 \
              PORT=8080 \
              WEBSITE_NODE_DEFAULT_VERSION="~18" \
              NODE_ENV="production" \
              SCM_DO_BUILD_DURING_DEPLOYMENT="false" \
              WEBSITE_RUN_FROM_PACKAGE="1" \
              COMMAND="" \
              PM2_RUNTIME_OPTIONS=""
          
          # Configurar comando de inicialização
          az webapp config set --name ghbill-dev-app --resource-group ghbilling-rg --startup-file "node src/index.js"
      
      - name: Deploy to Azure Web App
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v3
        with:
          app-name: 'ghbill-dev-app'
          slot-name: 'Production'
          package: release.zip

      - name: Configure App Service post-deployment
        run: |
          echo "Configurando App Service após implantação..."
          
          # Reiniciar a aplicação
          az webapp restart --name ghbill-dev-app --resource-group ghbilling-rg
          
          # Aguardar inicialização da aplicação
          echo "Aguardando 30 segundos para inicialização da aplicação..."
          sleep 30
          
          # Verificar se a aplicação está respondendo
          echo "Verificando se a aplicação está respondendo..."
          curl -s -o /dev/null -w "%{http_code}" https://ghbill-dev-app.azurewebsites.net/ping || echo "Não foi possível acessar a aplicação"
          
          # Configurar logs detalhados
          az webapp log config \
            --name ghbill-dev-app \
            --resource-group ghbilling-rg \
            --application-logging filesystem \
            --detailed-error-messages true \
            --failed-request-tracing true \
            --web-server-logging filesystem
