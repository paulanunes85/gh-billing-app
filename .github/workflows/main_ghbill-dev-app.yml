# Docs for the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# More GitHub Actions for Azure: https://github.com/Azure/actions

name: Build and deploy Node.js app to Azure Web App - ghbill-dev-app

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js version
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'
          cache: 'npm'

      - name: npm install, build, and test
        run: |
          npm ci
          npm run build --if-present
          npm run test --if-present
        env:
          CI: true
          SESSION_SECRET: "placeholder-for-build"
          GITHUB_CLIENT_ID: "placeholder-for-build"
          GITHUB_CLIENT_SECRET: "placeholder-for-build"
          MONGODB_URI: "placeholder-for-build"

      - name: Create deployment package
        run: |
          # Criar arquivo de inicialização personalizado
          echo "#!/bin/bash" > startup.sh
          echo "cd /home/site/wwwroot" >> startup.sh
          echo "echo 'Starting application...'" >> startup.sh
          echo "node src/index.js" >> startup.sh
          chmod +x startup.sh
          
          # Adicionar configuração para a porta 8080 no package.json
          node -e "const fs = require('fs'); const pkg = JSON.parse(fs.readFileSync('package.json')); pkg.scripts = pkg.scripts || {}; pkg.scripts.start = 'node src/index.js'; fs.writeFileSync('package.json', JSON.stringify(pkg, null, 2));"
          
          # Criar web.config para Azure
          cat > web.config << EOF
<?xml version="1.0" encoding="utf-8"?>
<configuration>
  <system.webServer>
    <handlers>
      <add name="iisnode" path="src/index.js" verb="*" modules="iisnode" />
    </handlers>
    <rewrite>
      <rules>
        <rule name="NodeInspector" patternSyntax="ECMAScript" stopProcessing="true">
          <match url="^src/index.js\/debug[\/]?" />
        </rule>
        <rule name="StaticContent">
          <action type="Rewrite" url="public{REQUEST_URI}" />
        </rule>
        <rule name="DynamicContent">
          <conditions>
            <add input="{REQUEST_FILENAME}" matchType="IsFile" negate="True" />
          </conditions>
          <action type="Rewrite" url="src/index.js" />
        </rule>
      </rules>
    </rewrite>
    <iisnode 
      nodeProcessCommandLine="node"
      watchedFiles="*.js;node_modules\*;routes\*.js;views\*.ejs"
      loggingEnabled="true"
      debuggingEnabled="false"
    />
    <httpErrors existingResponse="PassThrough" />
  </system.webServer>
</configuration>
EOF
          
          # Criar .deployment para Azure
          echo -e "[config]\ncommand = bash startup.sh" > .deployment
          
          # Verificar que o package.json tem a configuração de porta
          echo "Verificando package.json:"
          cat package.json
          
          # Criar o pacote ZIP para implantação
          zip -r release.zip . \
            --exclude=".git/*" \
            --exclude=".github/*" \
            --exclude="node_modules/*" \
            --exclude="tests/*"

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v4
        with:
          name: node-app
          path: release.zip
          retention-days: 1

  deploy:
    runs-on: ubuntu-latest
    needs: build
    permissions:
      id-token: write
      contents: read
    environment:
      name: 'Production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: node-app
      
      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      
      - name: Configure App Service pre-deployment
        run: |
          echo "Configurando App Service para implantação..."
          
          # Configura variáveis importantes
          az webapp config appsettings set --name ghbill-dev-app --resource-group ghbilling-rg --settings \
            WEBSITES_PORT=8080 \
            PORT=8080 \
            WEBSITE_NODE_DEFAULT_VERSION="~18" \
            NODE_ENV="production" \
            SCM_DO_BUILD_DURING_DEPLOYMENT="false" \
            WEBSITE_RUN_FROM_PACKAGE="1"
          
          # Remove configurações problemáticas
          az webapp config appsettings set --name ghbill-dev-app --resource-group ghbilling-rg --settings \
            COMMAND="" \
            PM2_RUNTIME_OPTIONS=""
          
          # Configura comando de inicialização
          az webapp config set --name ghbill-dev-app --resource-group ghbilling-rg --startup-file "node src/index.js"
      
      - name: 'Deploy to Azure Web App'
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v3
        with:
          app-name: 'ghbill-dev-app'
          slot-name: 'Production'
          package: release.zip

      - name: Configure App Service post-deployment
        run: |
          echo "Configurando App Service após implantação..."
          
          # Reinicia a aplicação para aplicar configurações
          az webapp restart --name ghbill-dev-app --resource-group ghbilling-rg
          
          # Espera um pouco para o app iniciar
          sleep 30
          
          # Verifica se a aplicação está respondendo
          echo "Verificando se a aplicação está respondendo..."
          curl -s -o /dev/null -w "%{http_code}" https://ghbill-dev-app.azurewebsites.net/ping || echo "Não foi possível acessar a aplicação"
          
          # Habilita logs detalhados
          az webapp log config --name ghbill-dev-app --resource-group ghbilling-rg --application-logging filesystem --detailed-error-messages true --failed-request-tracing true --web-server-logging filesystem
